{\rtf1\ansi\ansicpg936\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red100\green56\blue32;\red196\green26\blue22;\red155\green35\blue147;\red57\green0\blue160;\red28\green70\blue74;
\red15\green104\blue160;\red28\green0\blue207;\red50\green109\blue116;\red108\green54\blue169;\red93\green108\blue121;
}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c10981\c27276\c28869;
\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c36526\c42188\c47515\c35000;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww15360\viewh11000\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 //  main.cpp\cf4 \
\cf2 //  opencv0402\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by 
\f1 \'c1\'f5\'bc\'ce\'b3\'cf
\f0  on 2021/4/2. SGBM
\f1 \'cb\'e3\'b7\'a8
\f0 \cf4 \
\cf2 //\cf4 \
\cf5 #include \cf6 "opencv2/imgcodecs/legacy/constants_c.h"\cf4 \
\cf5 #include \cf6 <opencv2/highgui/highgui_c.h>\cf4 \
\cf5 #include \cf6 <opencv2/opencv.hpp>\cf4 \
\cf5 #include \cf6 <iostream>\cf4 \
\

\f2\b \cf7 using
\f0\b0 \cf4  
\f2\b \cf7 namespace
\f0\b0 \cf4  \cf8 std\cf4 ;\

\f2\b \cf7 using
\f0\b0 \cf4  
\f2\b \cf7 namespace
\f0\b0 \cf4  \cf9 cv\cf4 ;\
\

\f2\b \cf7 const
\f0\b0 \cf4  
\f2\b \cf7 int
\f0\b0 \cf4  \cf10 imageWidth\cf4  = \cf11 640\cf4 ;                             \cf2 //
\f1 \'c9\'e3\'cf\'f1\'cd\'b7\'b5\'c4\'b7\'d6\'b1\'e6\'c2\'ca
\f0 \cf4 \

\f2\b \cf7 const
\f0\b0 \cf4  
\f2\b \cf7 int
\f0\b0 \cf4  \cf10 imageHeight\cf4  = \cf11 480\cf4 ;\
\cf9 Size\cf4  \cf10 imageSize\cf4  = \cf9 Size\cf4 (\cf12 imageWidth\cf4 , \cf12 imageHeight\cf4 );         \cf2 //
\f1 \'cd\'bc\'cf\'f1\'b3\'df\'b4\'e7
\f0 \cf4 \
\
\cf9 Mat\cf4  \cf10 rgbImageL\cf4 , \cf10 grayImageL\cf4 ;           \cf2 //Mat
\f1 \'c0\'e0\'ca\'c7\'d3\'c3\'d3\'da\'b1\'a3\'b4\'e6\'cd\'bc\'cf\'f1\'d2\'d4\'bc\'b0\'c6\'e4\'cb\'fb\'be\'d8\'d5\'f3\'ca\'fd\'be\'dd\'b5\'c4\'ca\'fd\'be\'dd\'bd\'e1\'b9\'b9
\f0 \cf4 \
\cf9 Mat\cf4  \cf10 rgbImageR\cf4 , \cf10 grayImageR\cf4 ;\
\cf9 Mat\cf4  \cf10 rectifyImageL\cf4 , \cf10 rectifyImageR\cf4 ;\
\
\cf9 Rect\cf4  \cf10 validROIL\cf4 ;            \cf2 //
\f1 \'cd\'bc\'cf\'f1\'d0\'a3\'d5\'fd\'d6\'ae\'ba\'f3\'a3\'ac\'bb\'e1\'b6\'d4\'cd\'bc\'cf\'f1\'bd\'f8\'d0\'d0\'b2\'c3\'bc\'f4\'a3\'ac\'d5\'e2\'c0\'ef\'b5\'c4
\f0 validROI
\f1 \'be\'cd\'ca\'c7\'d6\'b8\'b2\'c3\'bc\'f4\'d6\'ae\'ba\'f3\'b5\'c4\'c7\'f8\'d3\'f2
\f0 \cf4 \
\cf9 Rect\cf4  \cf10 validROIR\cf4 ;            \cf2 //rect
\f1 \'be\'d8\'d0\'ce\'ba\'af\'ca\'fd
\f0 \cf4 \
\
\cf9 Mat\cf4  \cf10 mapLx\cf4 , \cf10 mapLy\cf4 , \cf10 mapRx\cf4 , \cf10 mapRy\cf4 ;     \cf2 //
\f1 \'d3\'b3\'c9\'e4\'b1\'ed
\f0 \cf4 \
\cf9 Mat\cf4  \cf10 Rl\cf4 , \cf10 Rr\cf4 , \cf10 Pl\cf4 , \cf10 Pr\cf4 , \cf10 Q\cf4 ;              \cf2 //
\f1 \'d0\'a3\'d5\'fd\'d0\'fd\'d7\'aa\'be\'d8\'d5\'f3
\f0 R
\f1 \'a3\'ac\'cd\'b6\'d3\'b0\'be\'d8\'d5\'f3
\f0 P 
\f1 \'d6\'d8\'cd\'b6\'d3\'b0\'be\'d8\'d5\'f3
\f0 Q\cf4 \
\cf9 Mat\cf4  \cf10 xyz\cf4 ;              \cf2 //
\f1 \'c8\'fd\'ce\'ac\'d7\'f8\'b1\'ea
\f0 \cf4 \
\
\cf9 Point\cf4  \cf10 origin\cf4 ;         \cf2 //
\f1 \'ca\'f3\'b1\'ea\'b0\'b4\'cf\'c2\'b5\'c4\'c6\'f0\'ca\'bc\'b5\'e3
\f0 \cf4 \
\cf9 Rect\cf4  \cf10 selection\cf4 ;      \cf2 //
\f1 \'b6\'a8\'d2\'e5\'be\'d8\'d0\'ce\'d1\'a1\'bf\'f2
\f0 \cf4 \

\f2\b \cf7 bool
\f0\b0 \cf4  \cf10 selectObject\cf4  = 
\f2\b \cf7 false
\f0\b0 \cf4 ;    \cf2 //
\f1 \'ca\'c7\'b7\'f1\'d1\'a1\'d4\'f1\'b6\'d4\'cf\'f3
\f0 \cf4 \
\
\
\cf9 Ptr\cf4 <\cf9 StereoSGBM\cf4 > \cf10 sgbm\cf4  = \cf9 StereoSGBM\cf4 ::\cf12 create\cf4 (\cf11 0\cf4 , \cf11 16\cf4 , \cf11 3\cf4 );\
\
\cf2 /*\cf4 \

\f1 \cf2 \'ca\'c2\'cf\'c8\'b1\'ea\'b6\'a8\'ba\'c3\'b5\'c4\'cf\'e0\'bb\'fa\'b5\'c4\'b2\'ce\'ca\'fd
\f0 \cf4 \
\cf2 fx 0 cx\cf4 \
\cf2 0 fy cy\cf4 \
\cf2 0 0  1\cf4 \
\cf2 */\cf4 \
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 matlab
\f1 \'c0\'ef\'b5\'c4\'d7\'f3\'cf\'e0\'bb\'fa\'b1\'ea\'b6\'a8\'be\'d8\'d5\'f3
\f0 \cf4 \
\cf9 Mat\cf4  \cf10 cameraMatrixL\cf4  = (\cf9 Mat_\cf4 <
\f2\b \cf7 double
\f0\b0 \cf4 >(\cf11 3\cf4 , \cf11 3\cf4 ) << \cf11 1123.507738058886\cf4 , \cf11 0\cf4 , \cf11 324.7238859005240\cf4 ,\
    \cf11 0\cf4 , \cf11 1127.282945351939\cf4 , \cf11 263.3336974194803\cf4 ,\
    \cf11 0\cf4 , \cf11 0\cf4 , \cf11 1.0\cf4 );\
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 Matlab
\f1 \'cb\'f9\'b5\'c3\'d7\'f3\'cf\'e0\'bb\'fa\'bb\'fb\'b1\'e4\'b2\'ce\'ca\'fd
\f0 \cf4 \
\cf9 Mat\cf4  \cf10 distCoeffL\cf4  = (\cf9 Mat_\cf4 <
\f2\b \cf7 double
\f0\b0 \cf4 >(\cf11 5\cf4 , \cf11 1\cf4 ) << -\cf11 0.109013556867451\cf4 , \cf11 0.709661003534675\cf4 , \cf11 0.002319272467005\cf4 , -\cf11 0.0009934357148160210\cf4 , -\cf11 4.116358718594088\cf4 );  \cf2 //
\f1 \'a3\'a8
\f0 K1
\f1 \'a3\'ac
\f0 K2
\f1 \'a3\'ac
\f0 P1
\f1 \'a3\'ac
\f0 P2
\f1 \'a3\'ac
\f0 K3
\f1 \'a3\'a9
\f0 \cf4 \
\
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 matlab
\f1 \'c0\'ef\'b5\'c4\'d3\'d2\'cf\'e0\'bb\'fa\'b1\'ea\'b6\'a8\'be\'d8\'d5\'f3
\f0 \cf4 \
\cf9 Mat\cf4  \cf10 cameraMatrixR\cf4  = (\cf9 Mat_\cf4 <
\f2\b \cf7 double
\f0\b0 \cf4 >(\cf11 3\cf4 , \cf11 3\cf4 ) << \cf11 1125.761625967723\cf4 , \cf11 0\cf4 , \cf11 319.3887168539959\cf4 ,\
    \cf11 0\cf4 , \cf11 1129.305978447782\cf4 , \cf11 270.6640131815286\cf4 ,\
    \cf11 0\cf4 , \cf11 0\cf4 , \cf11 1.0\cf4 );\
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 Matlab
\f1 \'cb\'f9\'b5\'c3\'d3\'d2\'cf\'e0\'bb\'fa\'bb\'fb\'b1\'e4\'b2\'ce\'ca\'fd
\f0 \cf4 \
\cf9 Mat\cf4  \cf10 distCoeffR\cf4  = (\cf9 Mat_\cf4 <
\f2\b \cf7 double
\f0\b0 \cf4 >(\cf11 5\cf4 , \cf11 1\cf4 ) << -\cf11 0.136891100359016\cf4 , \cf11 1.064612859061886\cf4 , \cf11 0.001689182346785\cf4 ,-\cf11 0.0008868523127893606\cf4 , -\cf11 5.963649858150998\cf4 );  \cf2 //
\f1 \'a3\'a8
\f0 K1
\f1 \'a3\'ac
\f0 K2
\f1 \'a3\'ac
\f0 P1
\f1 \'a3\'ac
\f0 P2
\f1 \'a3\'ac
\f0 K3
\f1 \'a3\'a9
\f0 \cf4 \
 \
\cf9 Mat\cf4  \cf10 T\cf4  = (\cf9 Mat_\cf4 <
\f2\b \cf7 double
\f0\b0 \cf4 >(\cf11 3\cf4 , \cf11 1\cf4 ) << -\cf11 120.6912133121152\cf4 , \cf11 0.855744633796061\cf4 , \cf11 2.316970609061114\cf4 );       \cf2 //T
\f1 \'c6\'bd\'d2\'c6\'cf\'f2\'c1\'bf
\f0 \cf4 \
\cf2 //Mat rec = (Mat_<double>(3, 1) <<-0.00968, 0.12232, -0.01482);//rec
\f1 \'d0\'fd\'d7\'aa\'cf\'f2\'c1\'bf
\f0 \cf4 \
\cf2 //Mat R;//R 
\f1 \'d0\'fd\'d7\'aa\'be\'d8\'d5\'f3
\f0 \cf4 \
\
\cf9 Mat\cf4  \cf10 R\cf4  = (\cf9 Mat_\cf4 <
\f2\b \cf7 double
\f0\b0 \cf4 >(\cf11 3\cf4 , \cf11 3\cf4 ) << \cf11 0.999923155739635\cf4 , -\cf11 0.001866975165498\cf4 , \cf11 0.012255489358735\cf4 ,\
         \cf11 0.001942204577353\cf4 , \cf11 0.999979328954652\cf4 , -\cf11 0.006129396771595\cf4 ,\
         -\cf11 0.012243792593407\cf4 , \cf11 0.006152728430164\cf4 , \cf11 0.999906112330450\cf4 );\
\
\

\f2\b \cf7 static
\f0\b0 \cf4  
\f2\b \cf7 void
\f0\b0 \cf4  \cf10 saveXYZ\cf4 (
\f2\b \cf7 const
\f0\b0 \cf4  
\f2\b \cf7 char
\f0\b0 \cf4 * filename, 
\f2\b \cf7 const
\f0\b0 \cf4  \cf9 Mat\cf4 & mat)\
\{\
    
\f2\b \cf7 const
\f0\b0 \cf4  
\f2\b \cf7 double
\f0\b0 \cf4  max_z = \cf11 16.0e4\cf4 ;\
    \cf8 FILE\cf4 * fp = \cf13 fopen\cf4 (filename, \cf6 "wt"\cf4 );\
    \cf13 printf\cf4 (\cf6 "%d %d \\n"\cf4 , mat.\cf12 rows\cf4 , mat.\cf12 cols\cf4 );\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  y = \cf11 0\cf4 ; y < mat.\cf12 rows\cf4 ; y++)\
    \{\
        
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  x = \cf11 0\cf4 ; x < mat.\cf12 cols\cf4 ; x++)\
        \{\
            \cf9 Vec3f\cf4  point = mat.\cf12 at\cf4 <\cf9 Vec3f\cf4 >(y, x);\
            
\f2\b \cf7 if
\f0\b0 \cf4  (\cf13 fabs\cf4 (point[\cf11 2\cf4 ] - max_z) < \cf5 FLT_EPSILON\cf4  || \cf13 fabs\cf4 (point[\cf11 2\cf4 ]) > max_z) 
\f2\b \cf7 continue
\f0\b0 \cf4 ;\
            \cf13 fprintf\cf4 (fp, \cf6 "%f %f %f\\n"\cf4 , point[\cf11 0\cf4 ], point[\cf11 1\cf4 ], point[\cf11 2\cf4 ]);\
\
        \}\
    \}\
    \cf13 fclose\cf4 (fp);\
\}\
\
\cf2 /*
\f1 \'b8\'f8\'c9\'ee\'b6\'c8\'cd\'bc\'c9\'cf\'c9\'ab
\f0 */\cf4 \

\f2\b \cf7 void
\f0\b0 \cf4  \cf10 GenerateFalseMap\cf4 (\cf9 cv\cf4 ::\cf9 Mat\cf4  &src, \cf9 cv\cf4 ::\cf9 Mat\cf4  &disp)\
\{\
    \cf2 // color map\cf4 \
    
\f2\b \cf7 float
\f0\b0 \cf4  max_val = \cf11 255.0f\cf4 ;\
    
\f2\b \cf7 float
\f0\b0 \cf4  map[\cf11 8\cf4 ][\cf11 4\cf4 ] = \{ \{ \cf11 0\cf4 ,\cf11 0\cf4 ,\cf11 0\cf4 ,\cf11 114\cf4  \},\{ \cf11 0\cf4 ,\cf11 0\cf4 ,\cf11 1\cf4 ,\cf11 185\cf4  \},\{ \cf11 1\cf4 ,\cf11 0\cf4 ,\cf11 0\cf4 ,\cf11 114\cf4  \},\{ \cf11 1\cf4 ,\cf11 0\cf4 ,\cf11 1\cf4 ,\cf11 174\cf4  \},\
    \{ \cf11 0\cf4 ,\cf11 1\cf4 ,\cf11 0\cf4 ,\cf11 114\cf4  \},\{ \cf11 0\cf4 ,\cf11 1\cf4 ,\cf11 1\cf4 ,\cf11 185\cf4  \},\{ \cf11 1\cf4 ,\cf11 1\cf4 ,\cf11 0\cf4 ,\cf11 114\cf4  \},\{ \cf11 1\cf4 ,\cf11 1\cf4 ,\cf11 1\cf4 ,\cf11 0\cf4  \} \};\
    
\f2\b \cf7 float
\f0\b0 \cf4  sum = \cf11 0\cf4 ;\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf11 0\cf4 ; i<\cf11 8\cf4 ; i++)\
        sum += map[i][\cf11 3\cf4 ];\
\
    
\f2\b \cf7 float
\f0\b0 \cf4  weights[\cf11 8\cf4 ]; \cf2 // relative   weights\cf4 \
    
\f2\b \cf7 float
\f0\b0 \cf4  cumsum[\cf11 8\cf4 ];  \cf2 // cumulative weights\cf4 \
    cumsum[\cf11 0\cf4 ] = \cf11 0\cf4 ;\
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf11 0\cf4 ; i<\cf11 7\cf4 ; i++) \{\
        weights[i] = sum / map[i][\cf11 3\cf4 ];\
        cumsum[i + \cf11 1\cf4 ] = cumsum[i] + map[i][\cf11 3\cf4 ] / sum;\
    \}\
\
    
\f2\b \cf7 int
\f0\b0 \cf4  height_ = src.\cf12 rows\cf4 ;\
    
\f2\b \cf7 int
\f0\b0 \cf4  width_ = src.\cf12 cols\cf4 ;\
    \cf2 // for all pixels do\cf4 \
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  v = \cf11 0\cf4 ; v<height_; v++) \{\
        
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  u = \cf11 0\cf4 ; u<width_; u++) \{\
\
            \cf2 // get normalized value\cf4 \
            
\f2\b \cf7 float
\f0\b0 \cf4  val = \cf8 std\cf4 ::\cf13 min\cf4 (\cf8 std\cf4 ::\cf13 max\cf4 (src.\cf12 data\cf4 [v*width_ + u] / max_val, \cf11 0.0f\cf4 ), \cf11 1.0f\cf4 );\
\
            \cf2 // find bin\cf4 \
            
\f2\b \cf7 int
\f0\b0 \cf4  i;\
            
\f2\b \cf7 for
\f0\b0 \cf4  (i = \cf11 0\cf4 ; i<\cf11 7\cf4 ; i++)\
                
\f2\b \cf7 if
\f0\b0 \cf4  (val<cumsum[i + \cf11 1\cf4 ])\
                    
\f2\b \cf7 break
\f0\b0 \cf4 ;\
\
            \cf2 // compute red/green/blue values\cf4 \
            
\f2\b \cf7 float
\f0\b0 \cf4    w = \cf11 1.0\cf4  - (val - cumsum[i])*weights[i];\
            \cf9 uchar\cf4  r = (\cf9 uchar\cf4 )((w*map[i][\cf11 0\cf4 ] + (\cf11 1.0\cf4  - w)*map[i + \cf11 1\cf4 ][\cf11 0\cf4 ]) * \cf11 255.0\cf4 );\
            \cf9 uchar\cf4  g = (\cf9 uchar\cf4 )((w*map[i][\cf11 1\cf4 ] + (\cf11 1.0\cf4  - w)*map[i + \cf11 1\cf4 ][\cf11 1\cf4 ]) * \cf11 255.0\cf4 );\
            \cf9 uchar\cf4  b = (\cf9 uchar\cf4 )((w*map[i][\cf11 2\cf4 ] + (\cf11 1.0\cf4  - w)*map[i + \cf11 1\cf4 ][\cf11 2\cf4 ]) * \cf11 255.0\cf4 );\
            \cf2 //rgb
\f1 \'c4\'da\'b4\'e6\'c1\'ac\'d0\'f8\'b4\'e6\'b7\'c5
\f0 \cf4 \
            disp.\cf12 data\cf4 [v*width_ * \cf11 3\cf4  + \cf11 3\cf4  * u + \cf11 0\cf4 ] = b;\
            disp.\cf12 data\cf4 [v*width_ * \cf11 3\cf4  + \cf11 3\cf4  * u + \cf11 1\cf4 ] = g;\
            disp.\cf12 data\cf4 [v*width_ * \cf11 3\cf4  + \cf11 3\cf4  * u + \cf11 2\cf4 ] = r;\
        \}\
    \}\
\}\
\
      \cf14 /**
\f3 \cf2 ***
\f1 \'c1\'a2\'cc\'e5\'c6\'a5\'c5\'e4
\f3 *****/
\f0 \cf4 \

\f2\b \cf7 void
\f0\b0 \cf4  \cf10 stereo_match\cf4 (
\f2\b \cf7 int
\f0\b0 \cf4 , 
\f2\b \cf7 void
\f0\b0 \cf4 *)\
\{\
    \cf12 sgbm\cf4 ->\cf12 setPreFilterCap\cf4 (\cf11 63\cf4 );\
    
\f2\b \cf7 int
\f0\b0 \cf4  sgbmWinSize =  \cf11 5\cf4 ;                            \cf2 //
\f1 \'c6\'a5\'c5\'e4\'bf\'e9\'b4\'f3\'d0\'a1\'a3\'ac\'b4\'f3\'d3\'da
\f0 1
\f1 \'b5\'c4\'c6\'e6\'ca\'fd
\f0 \cf4 \
    
\f2\b \cf7 int
\f0\b0 \cf4  NumDisparities = \cf11 416\cf4 ;                        \cf2 //
\f1 \'ca\'d3\'b2\'ee\'b4\'b0\'bf\'da
\f0 (
\f1 \'b7\'b6\'ce\'a7
\f0 )
\f1 \'a3\'ac\'d7\'ee\'b4\'f3\'ca\'d3\'b2\'ee\'d6\'b5\'ba\'cd\'d7\'ee\'d0\'a1\'ca\'d3\'b2\'ee\'d6\'b5\'d6\'ae\'b2\'ee\'a3\'ac\'b1\'d8\'d0\'eb\'ca\'c7
\f0 16
\f1 \'b5\'c4\'b1\'b6\'ca\'fd
\f0 \cf4 \
    
\f2\b \cf7 int
\f0\b0 \cf4  UniquenessRatio = \cf11 6\cf4 ;                         \cf2 //
\f1 \'ca\'d3\'b2\'ee\'ce\'a8\'d2\'bb\'d0\'d4\'b0\'d9\'b7\'d6\'b1\'c8\'a3\'ac
\f0  
\f1 \'ca\'d3\'b2\'ee\'b4\'b0\'bf\'da\'b7\'b6\'ce\'a7\'c4\'da\'d7\'ee\'b5\'cd\'b4\'fa\'bc\'db\'ca\'c7\'b4\'ce\'b5\'cd\'b4\'fa\'bc\'db\'b5\'c4
\f0 (1 + uniquenessRatio / 100)
\f1 \'b1\'b6\'ca\'b1\'a3\'ac\'d7\'ee\'b5\'cd\'b4\'fa\'bc\'db\'b6\'d4\'d3\'a6\'b5\'c4\'ca\'d3\'b2\'ee\'d6\'b5\'b2\'c5\'ca\'c7\'b8\'c3\'cf\'f1\'cb\'d8\'b5\'e3\'b5\'c4\'ca\'d3\'b2\'ee\'a3\'ac\'b7\'f1\'d4\'f2\'b8\'c3\'cf\'f1\'cb\'d8\'b5\'e3\'b5\'c4\'ca\'d3\'b2\'ee\'ce\'aa
\f0  0
\f1 \'a3\'ac\'cd\'a8\'b3\'a3\'ce\'aa
\f0 5~15.\cf4 \
    \cf12 sgbm\cf4 ->\cf12 setBlockSize\cf4 (sgbmWinSize);\
    
\f2\b \cf7 int
\f0\b0 \cf4  cn = \cf12 rectifyImageL\cf4 .\cf12 channels\cf4 ();               \cf2 //
\f1 \'cd\'a8\'b5\'c0\'ca\'fd
\f0 \cf4 \
\
    \cf12 sgbm\cf4 ->\cf12 setP1\cf4 (\cf11 8\cf4  * cn * sgbmWinSize * sgbmWinSize);     \cf2 //
\f1 \'b6\'af\'cc\'ac\'b9\'e6\'bb\'ae\'d6\'d0
\f0 P1 P2
\f1 \'bf\'d8\'d6\'c6\'ca\'d3\'b2\'ee\'b6\'c8\'b9\'e2\'bb\'ac\'b6\'c8
\f0  
\f1 \'d2\'bb\'b0\'e3\'a3\'ba
\f0 P1 = 8 * 
\f1 \'cd\'a8\'b5\'c0\'ca\'fd
\f0 *SADWindowSize*SADWindowSize\cf4 \
    \cf12 sgbm\cf4 ->\cf12 setP2\cf4 (\cf11 32\cf4  * cn * sgbmWinSize * sgbmWinSize);    \cf2 //
\f1 \'cd\'a8\'b3\'a3
\f0 P2 = 4 * P1
\f1 \'a3\'ac
\f0 p1
\f1 \'bf\'d8\'d6\'c6\'ca\'d3\'b2\'ee\'c6\'bd\'bb\'ac\'b6\'c8\'a3\'ac
\f0 p2
\f1 \'d6\'b5\'d4\'bd\'b4\'f3\'a3\'ac\'b2\'ee\'d2\'ec\'d4\'bd\'c6\'bd\'bb\'ac
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setMinDisparity\cf4 (\cf11 0\cf4 );                            \cf2 // 
\f1 \'d7\'ee\'d0\'a1\'ca\'d3\'b2\'ee\'d6\'b5
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setNumDisparities\cf4 (NumDisparities);             \cf2 //
\f1 \'ca\'d3\'b2\'ee\'b4\'b0\'bf\'da
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setUniquenessRatio\cf4 (UniquenessRatio);           \cf2 //
\f1 \'ca\'d3\'b2\'ee\'ce\'a8\'d2\'bb\'d0\'d4\'b0\'d9\'b7\'d6\'b1\'c8
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setSpeckleWindowSize\cf4 (\cf11 100\cf4 );                     \cf2 //
\f1 \'c6\'bd\'bb\'ac\'ca\'d3\'b2\'ee\'c7\'f8\'d3\'f2\'b5\'c4\'d7\'ee\'b4\'f3\'b3\'df\'b4\'e7\'d2\'d4\'bf\'bc\'c2\'c7\'c6\'e4\'d4\'eb\'c9\'f9\'b0\'df\'b5\'e3\'ba\'cd\'ce\'de\'d0\'a7\'a1\'a3
\f0 \cf4 \
                                                         \cf2 //
\f1 \'bd\'ab\'c6\'e4\'c9\'e8\'d6\'c3\'ce\'aa
\f0 0
\f1 \'bf\'c9\'bd\'fb\'d3\'c3\'b0\'df\'b5\'e3\'b9\'fd\'c2\'cb\'a1\'a3\'b7\'f1\'d4\'f2\'a3\'ac\'bd\'ab\'c6\'e4\'c9\'e8\'d6\'c3\'d4\'da
\f0 50 - 200
\f1 \'b5\'c4\'b7\'b6\'ce\'a7\'c4\'da\'a1\'a3
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setSpeckleRange\cf4 (\cf11 2\cf4 );                            \cf2 // 
\f1 \'ca\'d3\'b2\'ee\'b1\'e4\'bb\'af\'e3\'d0\'d6\'b5\'a3\'ac\'c3\'bf\'b8\'f6\'c1\'ac\'bd\'d3\'d7\'e9\'bc\'fe\'c4\'da\'b5\'c4\'d7\'ee\'b4\'f3\'ca\'d3\'b2\'ee\'b1\'e4\'bb\'af\'a1\'a3\'cd\'a8\'b3\'a3\'a3\'ac
\f0 1
\f1 \'bb\'f2
\f0 2
\f1 \'be\'cd\'d7\'e3\'b9\'bb\'ba\'c3\'c1\'cb
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setDisp12MaxDiff\cf4 (-\cf11 1\cf4 );                          \cf2 // 
\f1 \'d7\'f3\'d3\'d2\'ca\'d3\'b2\'ee\'cd\'bc\'b5\'c4\'d7\'ee\'b4\'f3\'c8\'dd\'d0\'ed\'b2\'ee\'d2\'ec\'a3\'a8\'b3\'ac\'b9\'fd\'bd\'ab\'b1\'bb\'c7\'e5\'c1\'e3\'a3\'a9\'a3\'ac\'c4\'ac\'c8\'cf\'ce\'aa
\f0  - 1
\f1 \'a3\'ac\'bc\'b4\'b2\'bb\'d6\'b4\'d0\'d0\'d7\'f3\'d3\'d2\'ca\'d3\'b2\'ee\'bc\'ec\'b2\'e9\'a1\'a3
\f0 \cf4 \
    \cf12 sgbm\cf4 ->\cf12 setMode\cf4 (\cf9 StereoSGBM\cf4 ::\cf12 MODE_SGBM\cf4 );                \cf2 //
\f1 \'b4\'f2\'bf\'aa
\f0 opencv
\f1 \'d7\'d4\'b4\'f8
\f0 SGBM
\f1 \'cb\'e3\'b7\'a8\'ce\'c4\'bc\'fe
\f0 \cf4 \
    \
    \cf9 Mat\cf4  disp, dispf, disp8;\
    \cf12 sgbm\cf4 ->\cf12 compute\cf4 (\cf12 rectifyImageL\cf4 , \cf12 rectifyImageR\cf4 , disp);   \cf2 //
\f1 \'bc\'c6\'cb\'e3\'ca\'d3\'b2\'ee
\f0 disp\cf4 \
    \cf2 //
\f1 \'c8\'a5\'ba\'da\'b1\'df
\f0 \cf4 \
    \cf9 Mat\cf4  img1p, img2p;\
    \cf12 copyMakeBorder\cf4 (\cf12 rectifyImageL\cf4 , img1p, \cf11 0\cf4 , \cf11 0\cf4 , NumDisparities, \cf11 0\cf4 , \cf5 IPL_BORDER_REPLICATE\cf4 );\
                           \cf2 //
\f1 \'a3\'a8\'ca\'e4\'c8\'eb\'a3\'ac\'ca\'e4\'b3\'f6\'a3\'ac\'b1\'df\'bd\'e7\'b7\'bd\'cf\'f2\'cc\'ed\'bc\'d3\'cf\'f1\'cb\'d8\'d6\'b5\'a3\'ac\'b1\'df\'bd\'e7\'c0\'e0\'d0\'cd\'a3\'ac\'b1\'df\'bd\'e7\'d6\'b5\'a3\'a9
\f0  BORDER_REPLICATE 
\f1 \'d6\'d8\'b8\'b4\'a3\'ba\'b6\'d4\'b1\'df\'bd\'e7\'cf\'f1\'cb\'d8\'bd\'f8\'d0\'d0\'b8\'b4\'d6\'c6
\f0 \cf4 \
                           \cf2 //
\f1 \'c0\'a9\'b3\'e4
\f0 src
\f1 \'d4\'ad\'cd\'bc\'b5\'c4\'b1\'df\'d4\'b5\'a3\'ac\'bd\'ab\'cd\'bc\'cf\'f1\'b1\'e4\'b4\'f3\'a3\'ac\'c8\'bb\'ba\'f3\'d2\'d4\'b8\'f7\'d6\'d6\'cd\'e2\'b2\'e5\'b7\'bd\'ca\'bd\'d7\'d4\'b6\'af\'cc\'ee\'b3\'e4\'cd\'bc\'cf\'f1\'b1\'df\'bd\'e7
\f0 \cf4 \
    \cf12 copyMakeBorder\cf4 (\cf12 rectifyImageR\cf4 , img2p, \cf11 0\cf4 , \cf11 0\cf4 , NumDisparities, \cf11 0\cf4 , \cf5 IPL_BORDER_REPLICATE\cf4 );\
    \
    dispf = disp.\cf12 colRange\cf4 (NumDisparities, img2p.\cf12 cols\cf4  - NumDisparities);                      \cf2 //colRange
\f1 \'ce\'aa\'d6\'b8\'b6\'a8\'b5\'c4\'c1\'d0
\f0 span
\f1 \'b4\'b4\'bd\'a8\'d2\'bb\'b8\'f6\'d0\'c2\'b5\'c4\'be\'d8\'d5\'f3\'cd\'b7\'a3\'ac\'bf\'c9\'c8\'a1\'d6\'b8\'b6\'a8\'c1\'d0\'c7\'f8\'bc\'e4\'d4\'aa\'cb\'d8\'a3\'bb\'d6\'bb\'c8\'a1\'b5\'bd\'d7\'f3\'b1\'df\'bd\'e7\'a3\'ac\'b2\'bb\'c8\'a1\'d3\'d2\'b1\'df\'bd\'e7
\f0 \cf4 \
    dispf.\cf12 convertTo\cf4 (disp8, \cf5 CV_8U\cf4 , \cf11 255\cf4  / (NumDisparities *\cf11 16.\cf4 ));    \cf2 //
\f1 \'ca\'fd\'be\'dd\'d7\'aa\'bb\'bb\'a3\'a8\'d7\'aa\'bb\'bb\'b3\'c9\'b5\'c4\'c4\'bf\'b1\'ea\'be\'d8\'d5\'f3\'a3\'ac\'c4\'bf\'b1\'ea\'be\'d8\'d5\'f3
\f0 m
\f1 \'b5\'c4\'ca\'fd\'be\'dd\'c0\'e0\'d0\'cd\'a3\'ac\'cb\'f5\'b7\'c5\'d2\'f2\'d7\'d3\'a3\'ac\'d4\'f6\'c1\'bf\'a3\'a9
\f0 \cf4 \
    \cf12 reprojectImageTo3D\cf4 (dispf, \cf12 xyz\cf4 , \cf12 Q\cf4 , 
\f2\b \cf7 true
\f0\b0 \cf4 );                       \cf2 //
\f1 \'d4\'da\'ca\'b5\'bc\'ca\'c7\'f3\'be\'e0\'c0\'eb\'ca\'b1\'a3\'ac
\f0 ReprojectTo3D
\f1 \'b3\'f6\'c0\'b4\'b5\'c4
\f0 X / W, Y / W, Z / W
\f1 \'b6\'bc\'d2\'aa\'b3\'cb\'d2\'d4
\f0 16(
\f1 \'d2\'b2\'be\'cd\'ca\'c7
\f0 W
\f1 \'b3\'fd\'d2\'d4
\f0 16)
\f1 \'a3\'ac\'b2\'c5\'c4\'dc\'b5\'c3\'b5\'bd\'d5\'fd\'c8\'b7\'b5\'c4\'c8\'fd\'ce\'ac\'d7\'f8\'b1\'ea\'d0\'c5\'cf\'a2\'a1\'a3
\f0 \cf4 \
    \cf12 xyz\cf4  = \cf12 xyz\cf4  * \cf11 16\cf4 ;\
    \cf12 imshow\cf4 (\cf6 "disparity"\cf4 , disp8);\
    \cf9 Mat\cf4  color(dispf.\cf12 size\cf4 (), \cf5 CV_8UC3\cf4 );\
    \cf12 GenerateFalseMap\cf4 (disp8, color);  \cf2 //
\f1 \'b5\'f7\'d3\'c3
\f0 GenerateFalseMap 
\f1 \'d7\'aa\'b3\'c9\'b2\'ca\'cd\'bc
\f0 \cf4 \
    \cf12 imshow\cf4 (\cf6 "disparity"\cf4 , color);      \cf2 //
\f1 \'cf\'d4\'ca\'be\'b2\'ca\'cd\'bc
\f0 \cf4 \
    \cf12 saveXYZ\cf4 (\cf6 "xyz.xls"\cf4 , \cf12 xyz\cf4 );\
\}\
\
\
\
\cf14 /**
\f3 \cf2 ***
\f1 \'c3\'e8\'ca\'f6\'a3\'ba\'ca\'f3\'b1\'ea\'b2\'d9\'d7\'f7\'bb\'d8\'b5\'f7
\f3 *****/
\f0 \cf4 \

\f2\b \cf7 static
\f0\b0 \cf4  
\f2\b \cf7 void
\f0\b0 \cf4  \cf10 onMouse\cf4 (
\f2\b \cf7 int
\f0\b0 \cf4  event, 
\f2\b \cf7 int
\f0\b0 \cf4  x, 
\f2\b \cf7 int
\f0\b0 \cf4  y, 
\f2\b \cf7 int
\f0\b0 \cf4 , 
\f2\b \cf7 void
\f0\b0 \cf4 *)\
\{\
    
\f2\b \cf7 if
\f0\b0 \cf4  (\cf12 selectObject\cf4 )\
    \{\
        \cf12 selection\cf4 .\cf12 x\cf4  = \cf5 MIN\cf4 (x, \cf12 origin\cf4 .\cf12 x\cf4 );\
        \cf12 selection\cf4 .\cf12 y\cf4  = \cf5 MIN\cf4 (y, \cf12 origin\cf4 .\cf12 y\cf4 );\
        \cf12 selection\cf4 .\cf12 width\cf4  = \cf8 std\cf4 ::\cf13 abs\cf4 (x - \cf12 origin\cf4 .\cf12 x\cf4 );\
        \cf12 selection\cf4 .\cf12 height\cf4  = \cf8 std\cf4 ::\cf13 abs\cf4 (y - \cf12 origin\cf4 .\cf12 y\cf4 );\
    \}\
\
    
\f2\b \cf7 switch
\f0\b0 \cf4  (event)\
    \{\
    
\f2\b \cf7 case
\f0\b0 \cf4  \cf12 EVENT_LBUTTONDOWN\cf4 :   \cf2 //
\f1 \'ca\'f3\'b1\'ea\'d7\'f3\'b0\'b4\'c5\'a5\'b0\'b4\'cf\'c2\'b5\'c4\'ca\'c2\'bc\'fe
\f0 \cf4 \
        \cf12 origin\cf4  = \cf9 Point\cf4 (x, y);\
        \cf12 selection\cf4  = \cf9 Rect\cf4 (x, y, \cf11 0\cf4 , \cf11 0\cf4 );\
        \cf12 selectObject\cf4  = 
\f2\b \cf7 true
\f0\b0 \cf4 ;\
        \cf13 cout\cf4  << \cf12 origin\cf4  << \cf6 "in world coordinate is: "\cf4  << \cf12 xyz\cf4 .\cf12 at\cf4 <\cf9 Vec3f\cf4 >(\cf12 origin\cf4 ) << \cf13 endl\cf4 ;\
        
\f2\b \cf7 break
\f0\b0 \cf4 ;\
    
\f2\b \cf7 case
\f0\b0 \cf4  \cf12 EVENT_LBUTTONUP\cf4 :    \cf2 //
\f1 \'ca\'f3\'b1\'ea\'d7\'f3\'b0\'b4\'c5\'a5\'ca\'cd\'b7\'c5\'b5\'c4\'ca\'c2\'bc\'fe
\f0 \cf4 \
        \cf12 selectObject\cf4  = 
\f2\b \cf7 false
\f0\b0 \cf4 ;\
        
\f2\b \cf7 if
\f0\b0 \cf4  (\cf12 selection\cf4 .\cf12 width\cf4  > \cf11 0\cf4  && \cf12 selection\cf4 .\cf12 height\cf4  > \cf11 0\cf4 )\
            
\f2\b \cf7 break
\f0\b0 \cf4 ;\
    \}\
\}\
\
\
\cf14 /**
\f3 \cf2 ***
\f1 \'d6\'f7\'ba\'af\'ca\'fd
\f3 *****/
\f0 \cf4 \

\f2\b \cf7 int
\f0\b0 \cf4  \cf10 main\cf4 ()\
\{\
    \cf2 /*  
\f1 \'c1\'a2\'cc\'e5\'d0\'a3\'d5\'fd
\f0     */\cf4 \
   \cf2 // Rodrigues(rec, R); //Rodrigues
\f1 \'b1\'e4\'bb\'bb
\f0 \cf4 \
    \cf12 stereoRectify\cf4 (\cf12 cameraMatrixL\cf4 , \cf12 distCoeffL\cf4 , \cf12 cameraMatrixR\cf4 , \cf12 distCoeffR\cf4 , \cf12 imageSize\cf4 , \cf12 R\cf4 , \cf12 T\cf4 , \cf12 Rl\cf4 , \cf12 Rr\cf4 , \cf12 Pl\cf4 , \cf12 Pr\cf4 , \cf12 Q\cf4 , \cf12 CALIB_ZERO_DISPARITY\cf4 ,\
        \cf11 0\cf4 , \cf12 imageSize\cf4 , &\cf12 validROIL\cf4 , &\cf12 validROIR\cf4 );\
    \cf12 initUndistortRectifyMap\cf4 (\cf12 cameraMatrixL\cf4 , \cf12 distCoeffL\cf4 , \cf12 Rl\cf4 , \cf12 Pl\cf4 , \cf12 imageSize\cf4 , \cf5 CV_16SC2\cf4 , \cf12 mapLx\cf4 , \cf12 mapLy\cf4 );\
    \cf12 initUndistortRectifyMap\cf4 (\cf12 cameraMatrixR\cf4 , \cf12 distCoeffR\cf4 , \cf12 Rr\cf4 , \cf12 Pr\cf4 , \cf12 imageSize\cf4 , \cf5 CV_16SC2\cf4 , \cf12 mapRx\cf4 , \cf12 mapRy\cf4 );\
\
    \cf2 /*  
\f1 \'b6\'c1\'c8\'a1\'cd\'bc\'c6\'ac
\f0     */\cf4 \
    \cf12 rgbImageL\cf4  = \cf12 imread\cf4 (\cf6 "/Users/user/Desktop/left0/l27.bmp"\cf4 , \cf12 CV_LOAD_IMAGE_COLOR\cf4 );\cf2 //CV_LOAD_IMAGE_COLOR\cf4 \
    \cf12 rgbImageR\cf4  = \cf12 imread\cf4 (\cf6 "/Users/user/Desktop/right0/r27.bmp"\cf4 , -\cf11 1\cf4 );\
\
\
    \cf2 /*  
\f1 \'be\'ad\'b9\'fd
\f0 remap
\f1 \'d6\'ae\'ba\'f3\'a3\'ac\'d7\'f3\'d3\'d2\'cf\'e0\'bb\'fa\'b5\'c4\'cd\'bc\'cf\'f1\'d2\'d1\'be\'ad\'b9\'b2\'c3\'e6\'b2\'a2\'c7\'d2\'d0\'d0\'b6\'d4\'d7\'bc\'c1\'cb
\f0  */\cf4 \
    \cf12 remap\cf4 (\cf12 rgbImageL\cf4 , \cf12 rectifyImageL\cf4 , \cf12 mapLx\cf4 , \cf12 mapLy\cf4 , \cf12 INTER_LINEAR\cf4 );\cf2 //INTER_LINEAR\cf4 \
    \cf12 remap\cf4 (\cf12 rgbImageR\cf4 , \cf12 rectifyImageR\cf4 , \cf12 mapRx\cf4 , \cf12 mapRy\cf4 , \cf12 INTER_LINEAR\cf4 );\
\
    \cf2 /*  
\f1 \'b0\'d1\'d0\'a3\'d5\'fd\'bd\'e1\'b9\'fb\'cf\'d4\'ca\'be\'b3\'f6\'c0\'b4
\f0 */\cf4 \
\
    \cf2 //
\f1 \'cf\'d4\'ca\'be\'d4\'da\'cd\'ac\'d2\'bb\'d5\'c5\'cd\'bc\'c9\'cf
\f0 \cf4 \
    \cf9 Mat\cf4  canvas;\
    
\f2\b \cf7 double
\f0\b0 \cf4  sf;\
    
\f2\b \cf7 int
\f0\b0 \cf4  w, h;\
    sf = \cf11 700.\cf4  / \cf5 MAX\cf4 (\cf12 imageSize\cf4 .\cf12 width\cf4 , \cf12 imageSize\cf4 .\cf12 height\cf4 );\
    w = \cf12 cvRound\cf4 (\cf12 imageSize\cf4 .\cf12 width\cf4  * sf);\
    h = \cf12 cvRound\cf4 (\cf12 imageSize\cf4 .\cf12 height\cf4  * sf);\
    canvas.\cf12 create\cf4 (h, w * \cf11 2\cf4 , \cf5 CV_8UC3\cf4 );   \cf2 //
\f1 \'d7\'a2\'d2\'e2\'cd\'a8\'b5\'c0
\f0 \cf4 \
\
                                        \cf2 //
\f1 \'d7\'f3\'cd\'bc\'cf\'f1\'bb\'ad\'b5\'bd\'bb\'ad\'b2\'bc\'c9\'cf
\f0 \cf4 \
    \cf9 Mat\cf4  canvasPart = canvas(\cf9 Rect\cf4 (w * \cf11 0\cf4 , \cf11 0\cf4 , w, h));                                \cf2 //
\f1 \'b5\'c3\'b5\'bd\'bb\'ad\'b2\'bc\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6
\f0 \cf4 \
    \cf12 resize\cf4 (\cf12 rectifyImageL\cf4 , canvasPart, canvasPart.\cf12 size\cf4 (), \cf11 0\cf4 , \cf11 0\cf4 , \cf12 INTER_AREA\cf4 );     \cf2 //
\f1 \'b0\'d1\'cd\'bc\'cf\'f1\'cb\'f5\'b7\'c5\'b5\'bd\'b8\'fa
\f0 canvasPart
\f1 \'d2\'bb\'d1\'f9\'b4\'f3\'d0\'a1
\f0 \cf4 \
    \cf9 Rect\cf4  vroiL(\cf12 cvRound\cf4 (\cf12 validROIL\cf4 .\cf12 x\cf4 *sf), \cf12 cvRound\cf4 (\cf12 validROIL\cf4 .\cf12 y\cf4 *sf),                \cf2 //
\f1 \'bb\'f1\'b5\'c3\'b1\'bb\'bd\'d8\'c8\'a1\'b5\'c4\'c7\'f8\'d3\'f2
\f0 \cf4 \
        \cf12 cvRound\cf4 (\cf12 validROIL\cf4 .\cf12 width\cf4 *sf), \cf12 cvRound\cf4 (\cf12 validROIL\cf4 .\cf12 height\cf4 *sf));\
    \cf2 //rectangle(canvasPart, vroiL, Scalar(0, 0, 255), 3, 8);                      //
\f1 \'bb\'ad\'c9\'cf\'d2\'bb\'b8\'f6\'be\'d8\'d0\'ce
\f0 \cf4 \
    \cf13 cout\cf4  << \cf6 "Painted ImageL"\cf4  << \cf13 endl\cf4 ;\
\
    \cf2 //
\f1 \'d3\'d2\'cd\'bc\'cf\'f1\'bb\'ad\'b5\'bd\'bb\'ad\'b2\'bc\'c9\'cf
\f0 \cf4 \
    canvasPart = canvas(\cf9 Rect\cf4 (w, \cf11 0\cf4 , w, h));                                      \cf2 //
\f1 \'bb\'f1\'b5\'c3\'bb\'ad\'b2\'bc\'b5\'c4\'c1\'ed\'d2\'bb\'b2\'bf\'b7\'d6
\f0 \cf4 \
    \cf12 resize\cf4 (\cf12 rectifyImageR\cf4 , canvasPart, canvasPart.\cf12 size\cf4 (), \cf11 0\cf4 , \cf11 0\cf4 , \cf12 INTER_LINEAR\cf4 );\
    \cf9 Rect\cf4  vroiR(\cf12 cvRound\cf4 (\cf12 validROIR\cf4 .\cf12 x\cf4  * sf), \cf12 cvRound\cf4 (\cf12 validROIR\cf4 .\cf12 y\cf4 *sf),\
        \cf12 cvRound\cf4 (\cf12 validROIR\cf4 .\cf12 width\cf4  * sf), \cf12 cvRound\cf4 (\cf12 validROIR\cf4 .\cf12 height\cf4  * sf));\
    \cf2 //rectangle(canvasPart, vroiR, Scalar(0, 0, 255), 3, 8);\cf4 \
    \cf13 cout\cf4  << \cf6 "Painted ImageR"\cf4  << \cf13 endl\cf4 ;\
\
    \cf2 //
\f1 \'bb\'ad\'c9\'cf\'b6\'d4\'d3\'a6\'b5\'c4\'cf\'df\'cc\'f5
\f0 \cf4 \
    
\f2\b \cf7 for
\f0\b0 \cf4  (
\f2\b \cf7 int
\f0\b0 \cf4  i = \cf11 0\cf4 ; i < canvas.\cf12 rows\cf4 ; i += \cf11 16\cf4 )\
        \cf12 line\cf4 (canvas, \cf9 Point\cf4 (\cf11 0\cf4 , i), \cf9 Point\cf4 (canvas.\cf12 cols\cf4 , i), \cf9 Scalar\cf4 (\cf11 0\cf4 , \cf11 255\cf4 , \cf11 0\cf4 ), \cf11 1\cf4 , \cf11 8\cf4 );\
    \cf12 imshow\cf4 (\cf6 "rectified"\cf4 , canvas);\
\
    \cf2 /*  
\f1 \'c1\'a2\'cc\'e5\'c6\'a5\'c5\'e4
\f0     */\cf4 \
    \cf12 namedWindow\cf4 (\cf6 "disparity"\cf4 , \cf12 CV_WINDOW_NORMAL\cf4 );\
    \cf2 //
\f1 \'ca\'f3\'b1\'ea\'cf\'ec\'d3\'a6\'ba\'af\'ca\'fd
\f0 setMouseCallback(
\f1 \'b4\'b0\'bf\'da\'c3\'fb\'b3\'c6
\f0 , 
\f1 \'ca\'f3\'b1\'ea\'bb\'d8\'b5\'f7\'ba\'af\'ca\'fd
\f0 , 
\f1 \'b4\'ab\'b8\'f8\'bb\'d8\'b5\'f7\'ba\'af\'ca\'fd\'b5\'c4\'b2\'ce\'ca\'fd\'a3\'ac\'d2\'bb\'b0\'e3\'c8\'a1
\f0 0)\cf4 \
    \cf12 setMouseCallback\cf4 (\cf6 "disparity"\cf4 , \cf12 onMouse\cf4 , \cf11 0\cf4 );\cf2 //disparity 
\f1 \'b5\'e3\'bb\'f7\'bb\'f1\'c8\'a1\'d7\'f8\'b1\'ea
\f0 \cf4 \
    \cf12 stereo_match\cf4 (\cf11 0\cf4 , \cf11 0\cf4 );\
\
    \cf12 waitKey\cf4 (\cf11 0\cf4 );\
    
\f2\b \cf7 return
\f0\b0 \cf4  \cf11 0\cf4 ;\
\}\
\
}