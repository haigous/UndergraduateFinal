{\rtf1\ansi\ansicpg936\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 PingFangSC-Regular;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red93\green108\blue121;\red255\green255\blue255;\red0\green0\blue0;
\red100\green56\blue32;\red196\green26\blue22;\red93\green108\blue121;\red155\green35\blue147;\red57\green0\blue160;
\red28\green70\blue74;\red15\green104\blue160;\red28\green0\blue207;\red50\green109\blue116;\red108\green54\blue169;
}
{\*\expandedcolortbl;;\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0\c85000;
\csgenericrgb\c39147\c22031\c12446;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c36526\c42188\c47515\c35000;\csgenericrgb\c60759\c13753\c57628;\csgenericrgb\c22454\c0\c62803;
\csgenericrgb\c10981\c27276\c28869;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c42190\c21278\c66379;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww13940\viewh13380\viewkind0
\deftab593
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 //\cf4 \
\cf2 //  main.cpp\cf4 \
\cf2 //  opencv0402\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by 
\f1 \'c1\'f5\'bc\'ce\'b3\'cf
\f0  on 2021/4/2. BM
\f1 \'cb\'e3\'b7\'a81.38
\f0 \cf4 \
\cf2 //\cf4 \
\cf5 #include \cf6 "opencv2/imgcodecs/legacy/constants_c.h"\cf4 \
\cf5 #include \cf6 <opencv2/highgui/highgui_c.h>\cf4 \
\cf5 #include \cf6 <opencv2/opencv.hpp>\cf4 \
\cf5 #include \cf6 <iostream>\cf4 \
\
\cf7 /**
\f2 \cf2 ****************************/
\f0 \cf4 \
\cf2 /*        
\f1 \'c1\'a2\'cc\'e5\'c6\'a5\'c5\'e4\'ba\'cd\'b2\'e2\'be\'e0
\f0         */\cf4 \
\cf7 /**
\f2 \cf2 ****************************/
\f0 \cf4 \
\

\f3\b \cf8 using
\f0\b0 \cf4  
\f3\b \cf8 namespace
\f0\b0 \cf4  \cf9 std\cf4 ;\

\f3\b \cf8 using
\f0\b0 \cf4  
\f3\b \cf8 namespace
\f0\b0 \cf4  \cf10 cv\cf4 ;\
\

\f3\b \cf8 const
\f0\b0 \cf4  
\f3\b \cf8 int
\f0\b0 \cf4  \cf11 imageWidth\cf4  = \cf12 640\cf4 ;                             \cf2 //
\f1 \'c9\'e3\'cf\'f1\'cd\'b7\'b5\'c4\'b7\'d6\'b1\'e6\'c2\'ca
\f0 \cf4 \

\f3\b \cf8 const
\f0\b0 \cf4  
\f3\b \cf8 int
\f0\b0 \cf4  \cf11 imageHeight\cf4  = \cf12 480\cf4 ;\
\cf10 Size\cf4  \cf11 imageSize\cf4  = \cf10 Size\cf4 (\cf13 imageWidth\cf4 , \cf13 imageHeight\cf4 );\
\
\cf10 Mat\cf4  \cf11 rgbImageL\cf4 , \cf11 grayImageL\cf4 ;\
\cf10 Mat\cf4  \cf11 rgbImageR\cf4 , \cf11 grayImageR\cf4 ;\
\cf10 Mat\cf4  \cf11 rectifyImageL\cf4 , \cf11 rectifyImageR\cf4 ;\
\
\cf10 Rect\cf4  \cf11 validROIL\cf4 ;\cf2 //
\f1 \'cd\'bc\'cf\'f1\'d0\'a3\'d5\'fd\'d6\'ae\'ba\'f3\'a3\'ac\'bb\'e1\'b6\'d4\'cd\'bc\'cf\'f1\'bd\'f8\'d0\'d0\'b2\'c3\'bc\'f4\'a3\'ac\'d5\'e2\'c0\'ef\'b5\'c4
\f0 validROI
\f1 \'be\'cd\'ca\'c7\'d6\'b8\'b2\'c3\'bc\'f4\'d6\'ae\'ba\'f3\'b5\'c4\'c7\'f8\'d3\'f2
\f0 \cf4 \
\cf10 Rect\cf4  \cf11 validROIR\cf4 ;\
\
\cf10 Mat\cf4  \cf11 mapLx\cf4 , \cf11 mapLy\cf4 , \cf11 mapRx\cf4 , \cf11 mapRy\cf4 ;     \cf2 //
\f1 \'d3\'b3\'c9\'e4\'b1\'ed
\f0 \cf4 \
\cf10 Mat\cf4  \cf11 Rl\cf4 , \cf11 Rr\cf4 , \cf11 Pl\cf4 , \cf11 Pr\cf4 , \cf11 Q\cf4 ;              \cf2 //
\f1 \'d0\'a3\'d5\'fd\'d0\'fd\'d7\'aa\'be\'d8\'d5\'f3
\f0 R
\f1 \'a3\'ac\'cd\'b6\'d3\'b0\'be\'d8\'d5\'f3
\f0 P 
\f1 \'d6\'d8\'cd\'b6\'d3\'b0\'be\'d8\'d5\'f3
\f0 Q\cf4 \
\cf10 Mat\cf4  \cf11 xyz\cf4 ;              \cf2 //
\f1 \'c8\'fd\'ce\'ac\'d7\'f8\'b1\'ea
\f0 \cf4 \
\
\cf10 Point\cf4  \cf11 origin\cf4 ;         \cf2 //
\f1 \'ca\'f3\'b1\'ea\'b0\'b4\'cf\'c2\'b5\'c4\'c6\'f0\'ca\'bc\'b5\'e3
\f0 \cf4 \
\cf10 Rect\cf4  \cf11 selection\cf4 ;      \cf2 //
\f1 \'b6\'a8\'d2\'e5\'be\'d8\'d0\'ce\'d1\'a1\'bf\'f2
\f0 \cf4 \

\f3\b \cf8 bool
\f0\b0 \cf4  \cf11 selectObject\cf4  = 
\f3\b \cf8 false
\f0\b0 \cf4 ;    \cf2 //
\f1 \'ca\'c7\'b7\'f1\'d1\'a1\'d4\'f1\'b6\'d4\'cf\'f3
\f0 \cf4 \
\

\f3\b \cf8 int
\f0\b0 \cf4  \cf11 blockSize\cf4  = \cf12 0\cf4 , \cf11 uniquenessRatio\cf4  = \cf12 0\cf4 , \cf11 numDisparities\cf4  = \cf12 0\cf4 ;\
\cf10 Ptr\cf4 <\cf10 StereoBM\cf4 > \cf11 bm\cf4  = \cf10 StereoBM\cf4 ::\cf13 create\cf4 (\cf12 16\cf4 , \cf12 9\cf4 );\
\
\cf2 /*\cf4 \

\f1 \cf2 \'ca\'c2\'cf\'c8\'b1\'ea\'b6\'a8\'ba\'c3\'b5\'c4\'cf\'e0\'bb\'fa\'b5\'c4\'b2\'ce\'ca\'fd
\f0 \cf4 \
\cf2 fx 0 cx\cf4 \
\cf2 0 fy cy\cf4 \
\cf2 0 0  1\cf4 \
\cf2 */\cf4 \
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 matlab
\f1 \'c0\'ef\'b5\'c4\'d7\'f3\'cf\'e0\'bb\'fa\'b1\'ea\'b6\'a8\'be\'d8\'d5\'f3
\f0 \cf4 \
\cf10 Mat\cf4  \cf11 cameraMatrixL\cf4  = (\cf10 Mat_\cf4 <
\f3\b \cf8 double
\f0\b0 \cf4 >(\cf12 3\cf4 , \cf12 3\cf4 ) << \cf12 1123.507738058886\cf4 , \cf12 0\cf4 , \cf12 324.7238859005240\cf4 ,\
    \cf12 0\cf4 , \cf12 1127.282945351939\cf4 , \cf12 263.3336974194803\cf4 ,\
    \cf12 0\cf4 , \cf12 0\cf4 , \cf12 1.0\cf4 );\
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 Matlab
\f1 \'cb\'f9\'b5\'c3\'d7\'f3\'cf\'e0\'bb\'fa\'bb\'fb\'b1\'e4\'b2\'ce\'ca\'fd
\f0 \cf4 \
\cf10 Mat\cf4  \cf11 distCoeffL\cf4  = (\cf10 Mat_\cf4 <
\f3\b \cf8 double
\f0\b0 \cf4 >(\cf12 5\cf4 , \cf12 1\cf4 ) << -\cf12 0.109013556867451\cf4 , \cf12 0.709661003534675\cf4 , \cf12 0.002319272467005\cf4 , -\cf12 0.0009934357148160210\cf4 , -\cf12 4.116358718594088\cf4 );  \cf2 //
\f1 \'a3\'a8
\f0 K1
\f1 \'a3\'ac
\f0 K2
\f1 \'a3\'ac
\f0 P1
\f1 \'a3\'ac
\f0 P2
\f1 \'a3\'ac
\f0 K3
\f1 \'a3\'a9
\f0 \cf4 \
\
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 matlab
\f1 \'c0\'ef\'b5\'c4\'d3\'d2\'cf\'e0\'bb\'fa\'b1\'ea\'b6\'a8\'be\'d8\'d5\'f3
\f0 \cf4 \
\cf10 Mat\cf4  \cf11 cameraMatrixR\cf4  = (\cf10 Mat_\cf4 <
\f3\b \cf8 double
\f0\b0 \cf4 >(\cf12 3\cf4 , \cf12 3\cf4 ) << \cf12 1125.761625967723\cf4 , \cf12 0\cf4 , \cf12 319.3887168539959\cf4 ,\
    \cf12 0\cf4 , \cf12 1129.305978447782\cf4 , \cf12 270.6640131815286\cf4 ,\
    \cf12 0\cf4 , \cf12 0\cf4 , \cf12 1.0\cf4 );\
\cf2 //
\f1 \'b6\'d4\'d3\'a6
\f0 Matlab
\f1 \'cb\'f9\'b5\'c3\'d3\'d2\'cf\'e0\'bb\'fa\'bb\'fb\'b1\'e4\'b2\'ce\'ca\'fd
\f0 \cf4 \
\cf10 Mat\cf4  \cf11 distCoeffR\cf4  = (\cf10 Mat_\cf4 <
\f3\b \cf8 double
\f0\b0 \cf4 >(\cf12 5\cf4 , \cf12 1\cf4 ) << -\cf12 0.136891100359016\cf4 , \cf12 1.064612859061886\cf4 , \cf12 0.001689182346785\cf4 ,-\cf12 0.0008868523127893606\cf4 , -\cf12 5.963649858150998\cf4 );  \cf2 //
\f1 \'a3\'a8
\f0 K1
\f1 \'a3\'ac
\f0 K2
\f1 \'a3\'ac
\f0 P1
\f1 \'a3\'ac
\f0 P2
\f1 \'a3\'ac
\f0 K3
\f1 \'a3\'a9
\f0 \cf4 \
 \
\cf10 Mat\cf4  \cf11 T\cf4  = (\cf10 Mat_\cf4 <
\f3\b \cf8 double
\f0\b0 \cf4 >(\cf12 3\cf4 , \cf12 1\cf4 ) << -\cf12 120.6912133121152\cf4 , \cf12 0.855744633796061\cf4 , \cf12 2.316970609061114\cf4 );       \cf2 //T
\f1 \'c6\'bd\'d2\'c6\'cf\'f2\'c1\'bf
\f0 \cf4 \
\cf2 //Mat rec = (Mat_<double>(3, 1) <<-0.00968, 0.12232, -0.01482);//rec
\f1 \'d0\'fd\'d7\'aa\'cf\'f2\'c1\'bf
\f0 \cf4 \
\cf2 //Mat R;//R 
\f1 \'d0\'fd\'d7\'aa\'be\'d8\'d5\'f3
\f0 \cf4 \
\
\cf10 Mat\cf4  \cf11 R\cf4  = (\cf10 Mat_\cf4 <
\f3\b \cf8 double
\f0\b0 \cf4 >(\cf12 3\cf4 , \cf12 3\cf4 ) << \cf12 0.999923155739635\cf4 , -\cf12 0.001866975165498\cf4 , \cf12 0.012255489358735\cf4 ,\
         \cf12 0.001942204577353\cf4 , \cf12 0.999979328954652\cf4 , -\cf12 0.006129396771595\cf4 ,\
         -\cf12 0.012243792593407\cf4 , \cf12 0.006152728430164\cf4 , \cf12 0.999906112330450\cf4 );\
\
\
      \cf7 /**
\f2 \cf2 ***
\f1 \'c1\'a2\'cc\'e5\'c6\'a5\'c5\'e4
\f2 *****/
\f0 \cf4 \

\f3\b \cf8 void
\f0\b0 \cf4  \cf11 stereo_match\cf4 (
\f3\b \cf8 int
\f0\b0 \cf4 , 
\f3\b \cf8 void
\f0\b0 \cf4 *)\
\{\
    \cf13 bm\cf4 ->\cf13 setBlockSize\cf4 (\cf12 2\cf4  * \cf13 blockSize\cf4  + \cf12 5\cf4 );     \cf2 //SAD
\f1 \'b4\'b0\'bf\'da\'b4\'f3\'d0\'a1\'a3\'ac
\f0 5~21
\f1 \'d6\'ae\'bc\'e4\'ce\'aa\'d2\'cb
\f0 \cf4 \
    \cf13 bm\cf4 ->\cf13 setROI1\cf4 (\cf13 validROIL\cf4 );\
    \cf13 bm\cf4 ->\cf13 setROI2\cf4 (\cf13 validROIR\cf4 );\
    \cf13 bm\cf4 ->\cf13 setPreFilterCap\cf4 (\cf12 31\cf4 );\
    \cf13 bm\cf4 ->\cf13 setMinDisparity\cf4 (\cf12 0\cf4 );  \cf2 //
\f1 \'d7\'ee\'d0\'a1\'ca\'d3\'b2\'ee\'a3\'ac\'c4\'ac\'c8\'cf\'d6\'b5\'ce\'aa
\f0 0, 
\f1 \'bf\'c9\'d2\'d4\'ca\'c7\'b8\'ba\'d6\'b5\'a3\'ac
\f0 int
\f1 \'d0\'cd
\f0 \cf4 \
    \cf13 bm\cf4 ->\cf13 setNumDisparities\cf4 (\cf13 numDisparities\cf4  * \cf12 16\cf4  + \cf12 16\cf4 );\cf2 //
\f1 \'ca\'d3\'b2\'ee\'b4\'b0\'bf\'da\'a3\'ac\'bc\'b4\'d7\'ee\'b4\'f3\'ca\'d3\'b2\'ee\'d6\'b5\'d3\'eb\'d7\'ee\'d0\'a1\'ca\'d3\'b2\'ee\'d6\'b5\'d6\'ae\'b2\'ee
\f0 ,
\f1 \'b4\'b0\'bf\'da\'b4\'f3\'d0\'a1\'b1\'d8\'d0\'eb\'ca\'c7
\f0 16
\f1 \'b5\'c4\'d5\'fb\'ca\'fd\'b1\'b6\'a3\'ac
\f0 int
\f1 \'d0\'cd
\f0 \cf4 \
    \cf13 bm\cf4 ->\cf13 setTextureThreshold\cf4 (\cf12 10\cf4 );\
    \cf13 bm\cf4 ->\cf13 setUniquenessRatio\cf4 (\cf13 uniquenessRatio\cf4 );\cf2 //uniquenessRatio
\f1 \'d6\'f7\'d2\'aa\'bf\'c9\'d2\'d4\'b7\'c0\'d6\'b9\'ce\'f3\'c6\'a5\'c5\'e4
\f0 \cf4 \
    \cf13 bm\cf4 ->\cf13 setSpeckleWindowSize\cf4 (\cf12 100\cf4 );\
    \cf13 bm\cf4 ->\cf13 setSpeckleRange\cf4 (\cf12 32\cf4 );\
    \cf13 bm\cf4 ->\cf13 setDisp12MaxDiff\cf4 (-\cf12 1\cf4 );\
    \cf10 Mat\cf4  disp, disp8;\
    \cf13 bm\cf4 ->\cf13 compute\cf4 (\cf13 rectifyImageL\cf4 , \cf13 rectifyImageR\cf4 , disp);\cf2 //
\f1 \'ca\'e4\'c8\'eb\'cd\'bc\'cf\'f1\'b1\'d8\'d0\'eb\'ce\'aa\'bb\'d2\'b6\'c8\'cd\'bc
\f0 \cf4 \
    disp.\cf13 convertTo\cf4 (disp8, \cf5 CV_8U\cf4 , \cf12 255\cf4  / ((\cf13 numDisparities\cf4  * \cf12 16\cf4  + \cf12 16\cf4 )*\cf12 16.\cf4 ));\cf2 //
\f1 \'bc\'c6\'cb\'e3\'b3\'f6\'b5\'c4\'ca\'d3\'b2\'ee\'ca\'c7
\f0 CV_16S
\f1 \'b8\'f1\'ca\'bd
\f0 \cf4 \
    \cf13 reprojectImageTo3D\cf4 (disp, \cf13 xyz\cf4 , \cf13 Q\cf4 , 
\f3\b \cf8 true
\f0\b0 \cf4 ); \cf2 //
\f1 \'d4\'da\'ca\'b5\'bc\'ca\'c7\'f3\'be\'e0\'c0\'eb\'ca\'b1\'a3\'ac
\f0 ReprojectTo3D
\f1 \'b3\'f6\'c0\'b4\'b5\'c4
\f0 X / W, Y / W, Z / W
\f1 \'b6\'bc\'d2\'aa\'b3\'cb\'d2\'d4
\f0 16(
\f1 \'d2\'b2\'be\'cd\'ca\'c7
\f0 W
\f1 \'b3\'fd\'d2\'d4
\f0 16)
\f1 \'a3\'ac\'b2\'c5\'c4\'dc\'b5\'c3\'b5\'bd\'d5\'fd\'c8\'b7\'b5\'c4\'c8\'fd\'ce\'ac\'d7\'f8\'b1\'ea\'d0\'c5\'cf\'a2\'a1\'a3
\f0 \cf4 \
    \cf13 xyz\cf4  = \cf13 xyz\cf4  * \cf12 16\cf4 ;\
    \cf13 imshow\cf4 (\cf6 "disparity"\cf4 , disp8);\
\}\
\
\cf7 /**
\f2 \cf2 ***
\f1 \'c3\'e8\'ca\'f6\'a3\'ba\'ca\'f3\'b1\'ea\'b2\'d9\'d7\'f7\'bb\'d8\'b5\'f7
\f2 *****/
\f0 \cf4 \

\f3\b \cf8 static
\f0\b0 \cf4  
\f3\b \cf8 void
\f0\b0 \cf4  \cf11 onMouse\cf4 (
\f3\b \cf8 int
\f0\b0 \cf4  event, 
\f3\b \cf8 int
\f0\b0 \cf4  x, 
\f3\b \cf8 int
\f0\b0 \cf4  y, 
\f3\b \cf8 int
\f0\b0 \cf4 , 
\f3\b \cf8 void
\f0\b0 \cf4 *)\
\{\
    
\f3\b \cf8 if
\f0\b0 \cf4  (\cf13 selectObject\cf4 )\
    \{\
        \cf13 selection\cf4 .\cf13 x\cf4  = \cf5 MIN\cf4 (x, \cf13 origin\cf4 .\cf13 x\cf4 );\
        \cf13 selection\cf4 .\cf13 y\cf4  = \cf5 MIN\cf4 (y, \cf13 origin\cf4 .\cf13 y\cf4 );\
        \cf13 selection\cf4 .\cf13 width\cf4  = \cf9 std\cf4 ::\cf14 abs\cf4 (x - \cf13 origin\cf4 .\cf13 x\cf4 );\
        \cf13 selection\cf4 .\cf13 height\cf4  = \cf9 std\cf4 ::\cf14 abs\cf4 (y - \cf13 origin\cf4 .\cf13 y\cf4 );\
    \}\
\
    
\f3\b \cf8 switch
\f0\b0 \cf4  (event)\
    \{\
    
\f3\b \cf8 case
\f0\b0 \cf4  \cf13 EVENT_LBUTTONDOWN\cf4 :   \cf2 //
\f1 \'ca\'f3\'b1\'ea\'d7\'f3\'b0\'b4\'c5\'a5\'b0\'b4\'cf\'c2\'b5\'c4\'ca\'c2\'bc\'fe
\f0 \cf4 \
        \cf13 origin\cf4  = \cf10 Point\cf4 (x, y);\
        \cf13 selection\cf4  = \cf10 Rect\cf4 (x, y, \cf12 0\cf4 , \cf12 0\cf4 );\
        \cf13 selectObject\cf4  = 
\f3\b \cf8 true
\f0\b0 \cf4 ;\
        \cf14 cout\cf4  << \cf13 origin\cf4  << \cf6 "in world coordinate is: "\cf4  << \cf13 xyz\cf4 .\cf13 at\cf4 <\cf10 Vec3f\cf4 >(\cf13 origin\cf4 ) << \cf14 endl\cf4 ;\
        
\f3\b \cf8 break
\f0\b0 \cf4 ;\
    
\f3\b \cf8 case
\f0\b0 \cf4  \cf13 EVENT_LBUTTONUP\cf4 :    \cf2 //
\f1 \'ca\'f3\'b1\'ea\'d7\'f3\'b0\'b4\'c5\'a5\'ca\'cd\'b7\'c5\'b5\'c4\'ca\'c2\'bc\'fe
\f0 \cf4 \
        \cf13 selectObject\cf4  = 
\f3\b \cf8 false
\f0\b0 \cf4 ;\
        
\f3\b \cf8 if
\f0\b0 \cf4  (\cf13 selection\cf4 .\cf13 width\cf4  > \cf12 0\cf4  && \cf13 selection\cf4 .\cf13 height\cf4  > \cf12 0\cf4 )\
            
\f3\b \cf8 break
\f0\b0 \cf4 ;\
    \}\
\}\
\
\
\cf7 /**
\f2 \cf2 ***
\f1 \'d6\'f7\'ba\'af\'ca\'fd
\f2 *****/
\f0 \cf4 \

\f3\b \cf8 int
\f0\b0 \cf4  \cf11 main\cf4 ()\
\{\
    \cf2 /*\cf4 \
\cf2     
\f1 \'c1\'a2\'cc\'e5\'d0\'a3\'d5\'fd
\f0 \cf4 \
\cf2     */\cf4 \
    \cf2 //Rodrigues(rec, R); //Rodrigues
\f1 \'b1\'e4\'bb\'bb
\f0 \cf4 \
    \cf13 stereoRectify\cf4 (\cf13 cameraMatrixL\cf4 , \cf13 distCoeffL\cf4 , \cf13 cameraMatrixR\cf4 , \cf13 distCoeffR\cf4 , \cf13 imageSize\cf4 , \cf13 R\cf4 , \cf13 T\cf4 , \cf13 Rl\cf4 , \cf13 Rr\cf4 , \cf13 Pl\cf4 , \cf13 Pr\cf4 , \cf13 Q\cf4 , \cf13 CALIB_ZERO_DISPARITY\cf4 ,\
        \cf12 0\cf4 , \cf13 imageSize\cf4 , &\cf13 validROIL\cf4 , &\cf13 validROIR\cf4 );\
    \cf13 initUndistortRectifyMap\cf4 (\cf13 cameraMatrixL\cf4 , \cf13 distCoeffL\cf4 , \cf13 Rl\cf4 , \cf13 Pr\cf4 , \cf13 imageSize\cf4 , \cf5 CV_32FC1\cf4 , \cf13 mapLx\cf4 , \cf13 mapLy\cf4 );\
    \cf13 initUndistortRectifyMap\cf4 (\cf13 cameraMatrixR\cf4 , \cf13 distCoeffR\cf4 , \cf13 Rr\cf4 , \cf13 Pr\cf4 , \cf13 imageSize\cf4 , \cf5 CV_32FC1\cf4 , \cf13 mapRx\cf4 , \cf13 mapRy\cf4 );\
\
    \cf2 /*\cf4 \
\cf2     
\f1 \'b6\'c1\'c8\'a1\'cd\'bc\'c6\'ac
\f0 \cf4 \
\cf2     */\cf4 \
    \cf13 rgbImageL\cf4  = \cf13 imread\cf4 (\cf6 "/Users/user/Desktop/left0/l28.bmp"\cf4 , \cf13 CV_LOAD_IMAGE_COLOR\cf4 );\
    \cf13 cvtColor\cf4 (\cf13 rgbImageL\cf4 , \cf13 grayImageL\cf4 , \cf13 CV_BGR2GRAY\cf4 );\
    \cf13 rgbImageR\cf4  = \cf13 imread\cf4 (\cf6 "/Users/user/Desktop/right0/r28.bmp"\cf4 , \cf13 CV_LOAD_IMAGE_COLOR\cf4 );\
    \cf13 cvtColor\cf4 (\cf13 rgbImageR\cf4 , \cf13 grayImageR\cf4 , \cf13 CV_BGR2GRAY\cf4 );\
\
    \cf13 imshow\cf4 (\cf6 "ImageL Before Rectify"\cf4 , \cf13 grayImageL\cf4 );\
    \cf13 imshow\cf4 (\cf6 "ImageR Before Rectify"\cf4 , \cf13 grayImageR\cf4 );\
\
    \cf2 /*\cf4 \
\cf2     
\f1 \'be\'ad\'b9\'fd
\f0 remap
\f1 \'d6\'ae\'ba\'f3\'a3\'ac\'d7\'f3\'d3\'d2\'cf\'e0\'bb\'fa\'b5\'c4\'cd\'bc\'cf\'f1\'d2\'d1\'be\'ad\'b9\'b2\'c3\'e6\'b2\'a2\'c7\'d2\'d0\'d0\'b6\'d4\'d7\'bc\'c1\'cb
\f0 \cf4 \
\cf2     */\cf4 \
    \cf13 remap\cf4 (\cf13 grayImageL\cf4 , \cf13 rectifyImageL\cf4 , \cf13 mapLx\cf4 , \cf13 mapLy\cf4 , \cf13 INTER_LINEAR\cf4 );\
    \cf13 remap\cf4 (\cf13 grayImageR\cf4 , \cf13 rectifyImageR\cf4 , \cf13 mapRx\cf4 , \cf13 mapRy\cf4 , \cf13 INTER_LINEAR\cf4 );\
\
    \cf2 /*\cf4 \
\cf2     
\f1 \'b0\'d1\'d0\'a3\'d5\'fd\'bd\'e1\'b9\'fb\'cf\'d4\'ca\'be\'b3\'f6\'c0\'b4
\f0 \cf4 \
\cf2     */\
\
\cf4 \
    \cf10 Mat\cf4  rgbRectifyImageL, rgbRectifyImageR;\
    \cf13 cvtColor\cf4 (\cf13 rectifyImageL\cf4 , rgbRectifyImageL, \cf13 CV_GRAY2BGR\cf4 );  \cf2 //
\f1 \'ce\'b1\'b2\'ca\'c9\'ab\'cd\'bc
\f0 \cf4 \
    \cf13 cvtColor\cf4 (\cf13 rectifyImageR\cf4 , rgbRectifyImageR, \cf13 CV_GRAY2BGR\cf4 );\
\
    \cf2 //
\f1 \'b5\'a5\'b6\'c0\'cf\'d4\'ca\'be
\f0 \cf4 \
    \cf2 //rectangle(rgbRectifyImageL, validROIL, Scalar(0, 0, 255), 3, 8);\cf4 \
    \cf2 //rectangle(rgbRectifyImageR, validROIR, Scalar(0, 0, 255), 3, 8);\cf4 \
    \cf13 imshow\cf4 (\cf6 "ImageL After Rectify"\cf4 , rgbRectifyImageL);\
    \cf13 imshow\cf4 (\cf6 "ImageR After Rectify"\cf4 , rgbRectifyImageR);\
\
    \cf2 //
\f1 \'cf\'d4\'ca\'be\'d4\'da\'cd\'ac\'d2\'bb\'d5\'c5\'cd\'bc\'c9\'cf
\f0 \cf4 \
    \cf10 Mat\cf4  canvas;\
    
\f3\b \cf8 double
\f0\b0 \cf4  sf;\
    
\f3\b \cf8 int
\f0\b0 \cf4  w, h;\
    sf = \cf12 600.\cf4  / \cf5 MAX\cf4 (\cf13 imageSize\cf4 .\cf13 width\cf4 , \cf13 imageSize\cf4 .\cf13 height\cf4 );\
    w = \cf13 cvRound\cf4 (\cf13 imageSize\cf4 .\cf13 width\cf4  * sf);\
    h = \cf13 cvRound\cf4 (\cf13 imageSize\cf4 .\cf13 height\cf4  * sf);\
    canvas.\cf13 create\cf4 (h, w * \cf12 2\cf4 , \cf5 CV_8UC3\cf4 );   \cf2 //
\f1 \'d7\'a2\'d2\'e2\'cd\'a8\'b5\'c0
\f0 \cf4 \
\
                                        \cf2 //
\f1 \'d7\'f3\'cd\'bc\'cf\'f1\'bb\'ad\'b5\'bd\'bb\'ad\'b2\'bc\'c9\'cf
\f0 \cf4 \
    \cf10 Mat\cf4  canvasPart = canvas(\cf10 Rect\cf4 (w * \cf12 0\cf4 , \cf12 0\cf4 , w, h));                                \cf2 //
\f1 \'b5\'c3\'b5\'bd\'bb\'ad\'b2\'bc\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6
\f0 \cf4 \
    \cf13 resize\cf4 (rgbRectifyImageL, canvasPart, canvasPart.\cf13 size\cf4 (), \cf12 0\cf4 , \cf12 0\cf4 , \cf13 INTER_AREA\cf4 );     \cf2 //
\f1 \'b0\'d1\'cd\'bc\'cf\'f1\'cb\'f5\'b7\'c5\'b5\'bd\'b8\'fa
\f0 canvasPart
\f1 \'d2\'bb\'d1\'f9\'b4\'f3\'d0\'a1
\f0 \cf4 \
    \cf10 Rect\cf4  vroiL(\cf13 cvRound\cf4 (\cf13 validROIL\cf4 .\cf13 x\cf4 *sf), \cf13 cvRound\cf4 (\cf13 validROIL\cf4 .\cf13 y\cf4 *sf),                \cf2 //
\f1 \'bb\'f1\'b5\'c3\'b1\'bb\'bd\'d8\'c8\'a1\'b5\'c4\'c7\'f8\'d3\'f2
\f0 \cf4 \
        \cf13 cvRound\cf4 (\cf13 validROIL\cf4 .\cf13 width\cf4 *sf), \cf13 cvRound\cf4 (\cf13 validROIL\cf4 .\cf13 height\cf4 *sf));\
    \cf2 //rectangle(canvasPart, vroiL, Scalar(0, 0, 255), 3, 8);                      //
\f1 \'bb\'ad\'c9\'cf\'d2\'bb\'b8\'f6\'be\'d8\'d0\'ce
\f0 \cf4 \
    \cf14 cout\cf4  << \cf6 "Painted ImageL"\cf4  << \cf14 endl\cf4 ;\
\
    \cf2 //
\f1 \'d3\'d2\'cd\'bc\'cf\'f1\'bb\'ad\'b5\'bd\'bb\'ad\'b2\'bc\'c9\'cf
\f0 \cf4 \
    canvasPart = canvas(\cf10 Rect\cf4 (w, \cf12 0\cf4 , w, h));                                      \cf2 //
\f1 \'bb\'f1\'b5\'c3\'bb\'ad\'b2\'bc\'b5\'c4\'c1\'ed\'d2\'bb\'b2\'bf\'b7\'d6
\f0 \cf4 \
    \cf13 resize\cf4 (rgbRectifyImageR, canvasPart, canvasPart.\cf13 size\cf4 (), \cf12 0\cf4 , \cf12 0\cf4 , \cf13 INTER_LINEAR\cf4 );\
    \cf10 Rect\cf4  vroiR(\cf13 cvRound\cf4 (\cf13 validROIR\cf4 .\cf13 x\cf4  * sf), \cf13 cvRound\cf4 (\cf13 validROIR\cf4 .\cf13 y\cf4 *sf),\
        \cf13 cvRound\cf4 (\cf13 validROIR\cf4 .\cf13 width\cf4  * sf), \cf13 cvRound\cf4 (\cf13 validROIR\cf4 .\cf13 height\cf4  * sf));\
    \cf2 //rectangle(canvasPart, vroiR, Scalar(0, 0, 255), 3, 8);\cf4 \
    \cf14 cout\cf4  << \cf6 "Painted ImageR"\cf4  << \cf14 endl\cf4 ;\
\
    \cf2 //
\f1 \'bb\'ad\'c9\'cf\'b6\'d4\'d3\'a6\'b5\'c4\'cf\'df\'cc\'f5
\f0 \cf4 \
    
\f3\b \cf8 for
\f0\b0 \cf4  (
\f3\b \cf8 int
\f0\b0 \cf4  i = \cf12 0\cf4 ; i < canvas.\cf13 rows\cf4 ; i += \cf12 16\cf4 )\
        \cf13 line\cf4 (canvas, \cf10 Point\cf4 (\cf12 0\cf4 , i), \cf10 Point\cf4 (canvas.\cf13 cols\cf4 , i), \cf10 Scalar\cf4 (\cf12 0\cf4 , \cf12 255\cf4 , \cf12 0\cf4 ), \cf12 1\cf4 , \cf12 8\cf4 );\
    \cf13 imshow\cf4 (\cf6 "rectified"\cf4 , canvas);\
\
    \cf2 /*\cf4 \
\cf2     
\f1 \'c1\'a2\'cc\'e5\'c6\'a5\'c5\'e4
\f0 \cf4 \
\cf2     */\cf4 \
    \cf13 namedWindow\cf4 (\cf6 "disparity"\cf4 , \cf13 CV_WINDOW_AUTOSIZE\cf4 );\
    \cf2 // 
\f1 \'b4\'b4\'bd\'a8
\f0 SAD
\f1 \'b4\'b0\'bf\'da
\f0  Trackbar\cf4 \
    \cf13 createTrackbar\cf4 (\cf6 "BlockSize:\\n"\cf4 , \cf6 "disparity"\cf4 , &\cf13 blockSize\cf4 , \cf12 8\cf4 , \cf13 stereo_match\cf4 );\
    \cf2 // 
\f1 \'b4\'b4\'bd\'a8\'ca\'d3\'b2\'ee\'ce\'a8\'d2\'bb\'d0\'d4\'b0\'d9\'b7\'d6\'b1\'c8\'b4\'b0\'bf\'da
\f0  Trackbar\cf4 \
    \cf13 createTrackbar\cf4 (\cf6 "UniquenessRatio:\\n"\cf4 , \cf6 "disparity"\cf4 , &\cf13 uniquenessRatio\cf4 , \cf12 50\cf4 , \cf13 stereo_match\cf4 );\
    \cf2 // 
\f1 \'b4\'b4\'bd\'a8\'ca\'d3\'b2\'ee\'b4\'b0\'bf\'da
\f0  Trackbar\cf4 \
    \cf13 createTrackbar\cf4 (\cf6 "NumDisparities:\\n"\cf4 , \cf6 "disparity"\cf4 , &\cf13 numDisparities\cf4 , \cf12 16\cf4 , \cf13 stereo_match\cf4 );\
    \cf2 //
\f1 \'ca\'f3\'b1\'ea\'cf\'ec\'d3\'a6\'ba\'af\'ca\'fd
\f0 setMouseCallback(
\f1 \'b4\'b0\'bf\'da\'c3\'fb\'b3\'c6
\f0 , 
\f1 \'ca\'f3\'b1\'ea\'bb\'d8\'b5\'f7\'ba\'af\'ca\'fd
\f0 , 
\f1 \'b4\'ab\'b8\'f8\'bb\'d8\'b5\'f7\'ba\'af\'ca\'fd\'b5\'c4\'b2\'ce\'ca\'fd\'a3\'ac\'d2\'bb\'b0\'e3\'c8\'a1
\f0 0)\cf4 \
    \cf13 setMouseCallback\cf4 (\cf6 "disparity"\cf4 , \cf13 onMouse\cf4 , \cf12 0\cf4 );\
    \cf13 stereo_match\cf4 (\cf12 0\cf4 , \cf12 0\cf4 );\
\
    \cf13 waitKey\cf4 (\cf12 0\cf4 );\
    
\f3\b \cf8 return
\f0\b0 \cf4  \cf12 0\cf4 ;\
\}\
\
\
}